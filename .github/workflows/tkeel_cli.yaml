name: tkeel_cli

on:
  push:
    branches:
      - master
      - release-*
    tags:
      - v*
  pull_request:
    branches:
      - master
      - release-*
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.16
      GOLANG_CI_LINT_VER: v1.31
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        target_arch: [ arm, arm64, amd64 ]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: windows-latest
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm64
    steps:
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Run make go.mod check-diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make go.mod check-diff
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Setup test output
        shell: bash
        run: |
          export TEST_OUTPUT_FILE=$GITHUB_WORKSPACE/test-unit.json
          echo "TEST_OUTPUT_FILE=$TEST_OUTPUT_FILE" >> $GITHUB_ENV
      - name: Run make test
        env:
          COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        if: matrix.target_arch == 'amd64'
        run: make test
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v1
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: Create release_version.txt
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          [ ! -z "${{ env.REL_VERSION }}" ] && echo "${{ env.REL_VERSION }}" > "${{ env.ARCHIVE_OUTDIR }}/release_version.txt"
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            ${{ env.ARCHIVE_OUTDIR }}/tkeel_${{ matrix.target_os }}_${{ matrix.target_arch }}.tar.gz
            ${{ env.ARCHIVE_OUTDIR }}/tkeel_${{ matrix.target_os }}_${{ matrix.target_arch }}.zip
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target_os }}_${{ matrix.target_arch }}_test_unit.json
          path: ${{ env.TEST_OUTPUT_FILE }}

  release:
    name: Create latest release
    needs:
      - build
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Auto build from ${{ github.sha }} (master)
          draft: false
          prerelease: true

  upload:
    name: Upload release files
    needs:
      - release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        project:
          - tkeel_darwin_amd64.tar.gz
          - tkeel_linux_amd64.tar.gz
          - tkeel_linux_arm.tar.gz
          - tkeel_linux_arm64.tar.gz
          - tkeel_windows_amd64.zip
    steps:
      - name: Download Artifact
        id: download
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: ${{ env.ARCHIVE_OUTDIR }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.download.outputs.download-path }}/${{ matrix.project }}
          asset_name: ${{ matrix.project }}
          asset_content_type: application/octet-stream

#  publish:
#    name: Publish binaries
#    needs: build
#    if: startswith(github.ref, 'refs/tags/v')
#    env:
#      ARTIFACT_DIR: ./release
#    runs-on: ubuntu-latest
#    steps:
#      - name: download artifacts
#        uses: actions/download-artifact@master
#        with:
#          name: cli_drop
#          path: ${{ env.ARTIFACT_DIR }}
#      - name: Set Release Version
#        run: |
#          REL_VERSION_FILE="${{ env.ARTIFACT_DIR }}/release_version.txt"
#          REL_VER=`cat ${REL_VERSION_FILE}`
#          echo "REL_VERSION=${REL_VER}" >> $GITHUB_ENV
#          rm -f ${REL_VERSION_FILE}
#      - name: generate checksum files
#        run: cd ${ARTIFACT_DIR} && for i in *; do sha256sum -b $i > "$i.sha256"; done && cd -
#      - name: lists artifacts
#        run: ls -l ${{ env.ARTIFACT_DIR }}
#      - name: publish binaries to github
#        id: create_release
#        uses: actions/create-release@v1
#        if: startswith(github.ref, 'refs/tags/v')
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          draft: false
#          prerelease: true
#        run: |
#          echo "installing github-release-cli..."
#          sudo npm install --silent --no-progress -g github-release-cli@1.3.1
#          # Get the list of files
#          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)
#          # Parse repository to get owner and repo names
#          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
#          REPO_NAME="${GITHUB_REPOSITORY#*/}"
#          export GITHUB_TOKEN=${{ secrets.TKEEL_BOT_TOKEN }}
#          echo "Uploading TKeel CLI Binaries to GitHub Release"
#          github-release upload \
#            --owner $OWNER_NAME --repo $REPO_NAME \
#            --tag "v${REL_VERSION}" \
#            --name "TKeel CLI v${REL_VERSION}" \
#            --prerelease true \
#            ${RELEASE_ARTIFACT[*]}