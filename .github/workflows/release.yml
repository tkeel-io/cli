name: release
on:
  release:
    types: [published]

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: ${{inputs.go_version}}
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archivers
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: windows-latest
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm64
      fail-fast: false
    steps:
      - name: Set up Go ${{env.GOVER}}
        uses: actions/setup-go@v2.1.4
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Run make go.mod check-diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: git diff --exit-code ./go.mod
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v1

      - name: Run make release
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: tk
          path: ${{ env.ARCHIVE_OUTDIR }}
  release:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get version from tag
        id: tag_name
        run: |
          echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
        shell: bash
      - name: Update Changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issues: true
          issuesWoLabels: true
          pullRequests: true
          prWoLabels: true
          addSections: '{"documentation":{"prefix":"**Documentation:**","labels":["documentation"]}}'
      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1
        with:
          version: ${{ github.ref }}
          path: ./CHANGELOG.md

  upload:
    name: Upload release files
    needs:
      - release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        project:
          - "*"
    steps:
      - name: Download Artifact
        id: download
        uses: actions/download-artifact@v2
        with:
          name: tk
          path: dist/archivers

      - name: Upload release binaries
        uses: alexellis/upload-assets@0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["${{ steps.download.outputs.download-path }}/${{ matrix.project }}"]'
